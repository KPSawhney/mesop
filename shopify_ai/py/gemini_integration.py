"""ShopifyAI Gemini integration helpers."""
from dataclasses import dataclass

from google import generativeai as genai
from google.cloud import bigquery
import sqlparse


@dataclass
class QueryParams:
    """Parameters used in query to Gemini."""
    question: str
    schema: str
    project_id: str
    model_name: str = 'gemini-1.5-pro'
    max_retries: int = 5


def _sql_script_prompt(
        query_params: QueryParams
) -> str:
    schema = query_params.schema
    project_id = query_params.project_id
    question = query_params.question

    return f"""You are an expert in analyzing Shopify data.

The schema of the table is: {schema}

The name of the table is: `{project_id}.shopify_ai.shopify_products`, and we are using BigQuery.

Please provide a SQL script that you can use to answer the question posed by the user.

I will then run that script for you, and provide you with the response so you
can answer the question.
                                    
Question: {question}"""

def ask_gemini_to_write_sql_script(
    query_params: QueryParams
) -> str:
    """Asks Gemini to write a SQL script to answer a question about Shopify data.

    Args:
      query_params: The query parameters to use.

    Returns:
      The SQL script generated by Gemini
    """
    model_name = query_params.model_name
    model = genai.GenerativeModel(model_name)
    prompt = _sql_script_prompt(query_params=query_params)
    return model.generate_content(prompt).text


def _ask_about_products_prompt(
        sql_script: str,
        sql_results: str,
        query_params: QueryParams
) -> str:
    question = query_params.question
    return f"""You are an expert in analyzing Shopify data.

Please answer the question posed by the user, based solely on the results from this SQL query:

{sql_script}

Please include the SQL script that was used, after your answer.

Make sure you format your response so that it renders nicely in markdown.

Results:

{sql_results}

Question: {question}"""


def ask_gemini_about_products(
    bq_client: bigquery.Client,
    query_params: QueryParams
) -> str:
    """Asks Gemini to answer a question about Shopify data.

    This function will first ask Gemini to write a SQL script to answer the
    question. If the script is successful, the results of the script will be
    used to answer the question. If the script is not successful, the function
    will retry up to `max_retries` times. If the script is still not successful
    after `max_retries` times, the function will return an error message.

    Args:
      bq_client: The BigQuery client
      query_params: The parameters to use to query Gemini

    Returns:
      The answer to the question
    """
    model_name = query_params.model_name
    max_retries = query_params.max_retries

    model = genai.GenerativeModel(model_name)
    print('Created model: model_name')

    retries = 0
    while retries < max_retries:
        try:
            sql_script = ask_gemini_to_write_sql_script(
                query_params=query_params)
            print(f'Got SQL script: {sql_script}')
            sql_script = sql_script.replace('```sql', '').replace('```', '')

            query_job = bq_client.query(sql_script)
            print('Created query job: ', query_job)
            results = query_job.result()
            df = results.to_dataframe()
            sql_results = df.to_markdown()
            print(f'Got results: {sql_results}')
            sql_script = sqlparse.format(
                sql_script, reindent=True, keyword_case='upper'
            )
            prompt = _ask_about_products_prompt(
                sql_script=sql_script,
                sql_results=sql_results,
                query_params=query_params
            )
            result = model.generate_content(prompt)
            return result.text
        except Exception as e:  # pylint: disable=broad-except
            retries += 1
            print(f'Retrying, attempt {retries} of {max_retries}')
            print('Encountered error: ', e)
            continue
    return "Sorry, I couldn't complete the operation after multiple attempts."
